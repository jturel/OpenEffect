<?
/**
* Copyright (C) 2002 SIA ESOFTS.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License 
* version 2 as published by the Free Software Foundation.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the SIA ESOFTS, 38/40 Blaumana str., 
* Riga, LV - 1011, LATVIA, e-mail office@esoft.lv 
*
* This General Public License does not permit incorporating your program into
* proprietary programs. Should you require to License Open Effect under the
* commercial License, please contact SIA ESOFTS for up-to-date information.
*/


class portfolioin extends pluginClass {

   // Constructor
   function portfolioin(&$parent, $cfg) {
      global $conn_s;
      $this->root_dir = TMPL_DIR;
      $this->pluginClass(&$parent, $cfg);
      $this->log = $this->kernel->loger->reg('In Portfolio CONSTRUCTOR');
      $this->log->put('Start');
      $this->api = new rus_api(&$this,$cfg);

      $this->col = $this->cfg->get('ColumnCount');
      $this->row = $this->cfg->get('RowCount');

      if ($this->cfg->get('SpecialOutPut')){
         $this->SOut = 1;
         $fld = $this->cfg->get('Special_fields');
         if ($fld) {
            if (!is_array($fld)) $fld = array($fld);
               for ($i=0;$i<count($fld);$i++)
                   $exp[$fld[$i]] = $this->cfg->get("expresion$i");
         }
         $this->fld = $exp;
      } else $exp = 0;

        
      $models    = new browse($this,$cfg,$this->cfg->get('template_image'), $this->col, $this->row ,$this->MakeArray());
//      $navigator = new navigator($this,$cfg,$this->cfg->get("template_navigator"), $conn_s+0,$this->count,"",$this->api->genURL('conn_s'));
      $navigator = new navigator($this,$cfg,$this->cfg->get('template_navigator'), $conn_s+0, $this->count ,'',$this->api->genURL('conn_s'),$this->arr);

      $a = new document_(&$this,$cfg,$this->cfg->get('template'),$this->parent->docNr,0,$exp,array_merge($this->arr,array('LIST' => $models->html,'NAVIGATOR' => $navigator->html)));
      $this->html = $a->html;
   }
   
   // Parse template into HTML vars
   function MakeArray() {
      global $conn_s;
      $id = $this->parent->docNr;
      $count = $this->col*$this->row;

      $ar = $this->api->SetFields($id);
      $ar['height_inc'] = round($ar['height']/2.54,2);
      $ar['waist_inc']  = round($ar['waist']/2.54,2);
      $ar['bust_inc']   = round($ar['bust']/2.54,2);
      $ar['hips_inc']   = round($ar['hips']/2.54,2);
      $this->arr = $ar;
      
      $Arr = array();
      if ($conn_s>1) $i=($conn_s-1)*$count;

      while ($ar["picture$i"]) {
        $Arr[] = array('ID' => $i+1,'picture'=>$ar["picture$i"],'title'=>$ar["description$i"]);
         $i++;
      }


      $this->count = round(($i/$count)+0.4555);  

      return $Arr;
   }
}
?>