<?
/**
* Copyright (C) 2002 SIA ESOFTS.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License 
* version 2 as published by the Free Software Foundation.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the SIA ESOFTS, 38/40 Blaumana str., 
* Riga, LV - 1011, LATVIA, e-mail office@esoft.lv 
*
* This General Public License does not permit incorporating your program into
* proprietary programs. Should you require to License Open Effect under the
* commercial License, please contact SIA ESOFTS for up-to-date information.
*/



/*********************************************
*
*  LIST constructor plugin
*
*********************************************/

class doclist_ extends pluginClass {

   // Constructor
   function doclist_(&$parent, $cfg, $template, $GrpID, $start = 0, $count = 9999,$sort=0, $direction=0) {
      $this->root_dir = TMPL_DIR;
      $this->pluginClass(&$parent, $cfg);
      if ($parent->api) $this->api = &$parent->api;
      else $this->api = new rus_api(&$parent,$cfg);

      $this->log = $this->kernel->loger->reg("!!Documents list");
      $this->Grp         = $GrpID;
      $this->pagesize    = $count;
      $this->pageStart   = $start;
      $this->sort        = $sort;
      $this->direction   = $direction;
  
      $this->tmpl = $this->readTemplate($template);
      $this->listF();

      $this->tmpl->set_var(array('GroupName' => $GrpID));
      $this->tmpl->parse('out', array('body_of_list'));
      $out = $this->tmpl->get('out');
      $this->html = $out;        
   }
   
   // Read template
   // $fName - file name of template
   function readTemplate($fName) {
      $this->log->put("Read template [$fName]");
      $this->kernel->classLoader->checkClass("templateClass");
      $tmpl = new templateClass($this->root_dir, "remove");
      $tmpl->halt_on_error = "yes";
      
      $tmpl->set_file(array("body_of_list" => $fName));
      $tmpl->set_block("body_of_list", "item_block", "output");
      return $tmpl;
   }

   // List work function
   function listF() {
      $start = $this->pageStart*$this->pagesize;

//      if ($this->pagesize) 

        if ($this->sort)
           $result = $this->api->listF($this->Grp,$this->direction,$this->pagesize,$this->pageStart,$this->sort);
        else 
           $result = $this->api->listF($this->Grp,$this->direction,$this->pagesize,$this->pageStart);
//      else                 $result = $this->api->listF($this->Grp,$this->direction,0,0,$sort);

        $this->kernel->debug_text .=  count($result).'<br>';

      for ($Cn = 0; $Cn < count($result); $Cn++) {
          $tmp = $result[$Cn];
          if (!$this->SOut) $this->tmpl->set_var($tmp);
          else              $this->ex->make($tmp);
          $this->tmpl->parse("output", "item_block", true);
          $this->tmpl->set_var($this->CleatF($tmp));
      }

   }

   function CleatF($r){
        while (list ($key, $val) = each ($r)) $r[$key]='';
        return $r;
   }
   
}
?>