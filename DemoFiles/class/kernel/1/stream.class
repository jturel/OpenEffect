<?php

/***************************************
*  Stream class (parent class)
*  Operate  
*  
***************************************/

#
# Main Stream class
#

  $this->checkClass("linkerClass", "streamClass, streamItemClass");
  

  class streamClass extends linkerClass {
     var $className = "streamClass";          // Class name
     var $childClassName = "streamItemClass"; // Child class name
     var $childItems = [];                         // Array of child items

     // Stream registrator
     // $name - name of registred stream
     // RETURN : pointer on create stream OR false if FALSE
     function &regStream($name) {
        if (!$name) return false;
	$name = strtoupper($name);
        if (array_key_exists($name, $this->childItems)) {
          return $this->childItems[$name];
        }
	$this->childItems[$name] = $this->createStream($name);
	return $this->childItems[$name]; 
     }
     
     
     // Delete stream from array
     // $name - name of delete stream
     // RETURN : true - if TRUE, false - if FALSE
     function delStream($name) {
        if (!$name) return false;
        if (!is_object($this->childItems[$name])) return false;
	
	// SOMETHING....
	
	return true;
     }
     
     
     // Create Stream item object
     // $name - name of creating stream
     // RETURN : create stream object
     function createStream($name) {
	eval("\$obj = new ".$this->childClassName."(\$this, \$name);");
	return $obj;
     }
     
  } // finished Main Stream class


#
# Item Stream class
#
 
  class streamItemClass extends linkerClass {
     var $className  = "streamItemClass"; // Class name
     var $streamName;                     // Item name
  
     // Constructor
     // $parent - pointer on parent object
     // $name - name of stream
     function __construct(&$parent, $name) {
        parent::__construct($parent);
	$this->streamName = $name;
     }
  } // finished Item Stream class
 
?>
