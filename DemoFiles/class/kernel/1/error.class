<?php

/***************************************
*  Error class
*  
***************************************/
  $this->checkClass("linkerClass", "errorClass");
  

  class errorClass extends linkerClass {
     var $className = "errorClass";          // Class name
     var $die = false;
  
     // Constructor
     // $parent - pointer on parent object
     // $lngFile - File name of Language Configuration file
     function __construct(&$parent, $lngFile) {
        parent::__construct($parent);
        $this->lngStream = $this->kernel->lnger->reg("ERROR", $lngFile);
     }

     // print Error output
     // $name - name of Lng String
     // $param - Dinamic Parametrs for string
     function parse($name, $param = array()) {
        print $this->getHTML($name, $param);
        if ($this->die) die();
     }


     // Print Error message 
     // $name - name of Lng String
     // $param - Dinamic Parametrs for string
     function msg($name, $param = array()) {
        print $this->getMsg($name, $param);
        if ($this->die) die();
     }

     // Get Error message 
     // $name - name of Lng String
     // $param - Dinamic Parametrs for string
     function getMsg($name, $param = array()) {
        $value = $this->lngStream->get($name);
        if (is_array($value)) $value = $value[0];
        return $this->parseParam($value, $param);
     }

     // get Error output
     // $name - name of Lng String
     // $param - Dinamic Parametrs for string
     function getHTML($name, $param = array()) {
        $value = $this->lngStream->get($name);
        if (is_array($value)) {
           $tmplName = $value[1];
           $value = $value[0];
        } else {
           if ($this->lngStream->check("defaultTemplate"))
                 $tmplName = $this->lngStream->get("defaultTemplate");
            else return $this->parseParam($value, $param);
        }
        $value = $this->parseParam($value, $param);

        // Get Error template and parse ERROR message string
        // (if Template class exists)
        if ($this->kernel->classLoader->checkClass("templateClass", "", false)) {
           $tmpl = new templateClass(ERROR_TMPL_DIR, "remove");
           $tmpl->halt_on_error = "yes";
           $tmpl->set_file(array("body" => $tmplName));
           $tmpl->set_var(array("STRING" => $value));
           $tmpl->parse("out", array("body"));
           $tmpl->parseLng("out", $this->lngStream, $tmpl);
           $out = $tmpl->get("out");
        
           return $out;
        }
        return $this->parseParam($value, $param);
     }

     // Parse parametrs in string
     function parseParam($value, &$param) {
        for ($Cn = 1; $Cn <= count($param); $Cn++)
            $value = str_replace("{".$Cn."}", $param[$Cn - 1], $value);
        return $value;
     }
  } // finished Error class 
?>
